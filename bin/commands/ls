#!/bin/bash
set -euo pipefail
export LC_ALL=C
export LANG=C

. ${ISOLA_ROOT}/bin/commands/common.bash

help_and_exit() {
  echo "Usage: isola ls [OPTIONS] [project[:name[:version]]]" >&2
  exit 1
}

while getopts :b:nh OPT; do
  case $OPT in
    h) help_and_exit ;;
    :) echo -e "Parsing Error: -$OPTARG\n" >&2; help_and_exit ;;
    *) echo -e "Unknown option: -$OPTARG\n" >&2; help_and_exit ;;
  esac
done
shift $((OPTIND - 1))

show_list() {
  if [[ "$#" == 0 ]]; then
    find ${ISOLA_ROOT}/projects -mindepth 1 -maxdepth 1 -type d -printf '%f\n'
  else
    local isola_str=$1
    local tokens=(${isola_str//:/ })
    if [[ "${#tokens[@]}" == 1 ]]; then
      # project
      local project=${tokens[0]}
      validate_project $project
      find ${ISOLA_ROOT}/projects/${project} -mindepth 1 -maxdepth 1 -type d -printf '%f\n'
    elif [[ "${#tokens[@]}" == 2 ]]; then
      # project:name
      local project=${tokens[0]}
      local name=${tokens[1]}
      validate_name $project $name
      find ${ISOLA_ROOT}/projects/${project}/${name} -mindepth 1 -maxdepth 1 -printf '%f\n'
    elif [[ "${#tokens[@]}" == 3 ]]; then
      # project:name:version
      local project=${tokens[0]}
      local name=${tokens[1]}
      local version=${tokens[2]}
      validate_version $project $name $version
      find ${ISOLA_ROOT}/projects/${project}/${name}/${version} -mindepth 0 -maxdepth 0 -printf '%f\n'
    else
      parse_error_and_exit $isola_str
    fi
  fi
}

show_list "$@"
